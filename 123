-- Corrected Spawner Control with Bundled Cable
local monitor = peripheral.wrap("right")
local redstoneSide = "back"

monitor.setTextScale(0.5)
monitor.setBackgroundColor(colors.black)
monitor.clear()

-- Button list and their corresponding bundled cable channel number (1-16)
-- The bit for a channel is 2^(channel - 1)
local channels = {
  {name="Blaze", channel=1},
  {name="Wither", channel=2},
  {name="Creeper", channel=3},
  {name="Iron Golem", channel=4},
  {name="Witch", channel=5},
  {name="Piglin", channel=6},
  {name="Other 1", channel=7},
  {name="Other 2", channel=8},
  {name="Other 3", channel=9},
  {name="Light", channel=10},
}

local states = {}
for i=1, #channels do
  states[i] = false
end

-- Button grid layout
local cols = 2 -- Changed to 2 to better fit all 10 buttons
local rows = math.ceil(#channels / cols)
local buttonW, buttonH = 20, 5
local padding = 1

local function drawButton(idx, x, y)
  local ch = channels[idx]
  local active = states[idx]
  -- Use monitor colors for the button display, not bundled cable values
  local color = active and colors.red or colors.gray
  
  monitor.setBackgroundColor(color)
  for dy=0, buttonH-1 do
    monitor.setCursorPos(x, y+dy)
    monitor.write(string.rep(" ", buttonW))
  end
  
  -- Write label centered
  monitor.setTextColor(colors.white)
  monitor.setCursorPos(x + math.floor((buttonW - #ch.name)/2), y+math.floor(buttonH/2))
  monitor.write(ch.name)
end

local function drawUI()
  monitor.setBackgroundColor(colors.black)
  monitor.clear()
  
  -- DEBUG HEADER
  monitor.setCursorPos(1,1)
  monitor.setTextColor(colors.white)
  monitor.write("Spawner Control Interface")
  
  local startY = 3 -- leave room for debug
  local idx = 1
  for r=0, rows-1 do
    for c=0, cols-1 do
      if idx <= #channels then
        local x = 2 + c*(buttonW+padding)
        local y = startY + r*(buttonH+padding)
        drawButton(idx, x, y)
        idx = idx + 1
      end
    end
  end
end

local function getButtonAt(x, y)
  local startY = 3
  local idx = 1
  for r=0, rows-1 do
    for c=0, cols-1 do
      if idx <= #channels then
        local bx = 2 + c*(buttonW+padding)
        local by = startY + r*(buttonH+padding)
        if x >= bx and x < bx+buttonW and y >= by and y < by+buttonH then
          return idx
        end
        idx = idx + 1
      end
    end
  end
  return nil
end

local function updateOutputs()
  local output = 0
  for i, ch in ipairs(channels) do
    if states[i] then
      output = output  2^(ch.channel - 1)
    end
  end
  redstone.setBundledOutput(redstoneSide, output)
end

-- Initial draw
drawUI()
updateOutputs()

-- Main loop
while true do
  local event, side, x, y = os.pullEvent("monitor_touch")
  local idx = getButtonAt(x, y)
  if idx then
    states[idx] = not states[idx]
    updateOutputs()
    drawUI()
    
    -- DEBUG line showing what was pressed
    monitor.setCursorPos(1,2)
    monitor.setBackgroundColor(colors.black)
    monitor.clearLine()
    monitor.setCursorPos(1,2)
    monitor.setTextColor(colors.white)
    monitor.write("Pressed: "..channels[idx].name.." = "..tostring(states[idx]))
  end
end
