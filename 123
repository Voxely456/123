-- mob_control v1.3 - ATM10 / CC:Tweaked
-- Advanced monitor UI to toggle bundled redstone bits.

--------------------------
-- CONFIG: set these
--------------------------
local MONITOR_SIDE = "auto"   -- "auto" or a real side: "left", "right", "back"
local BUNDLED_SIDE = "back"   -- side where the bundled cable is attached

-- Labels shown on screen
local labels_left  = { "Blaze", "Wither", "Creeper", "Other 1" }
local labels_right = { "Iron Golem", "Witch", "Piglin", "Other 2" }
local light_label  = "Light"

-- Map each label to a bundled color bit.
local channels = {
  ["Blaze"]      = colors.white,
  ["Wither"]     = colors.orange,
  ["Creeper"]    = colors.magenta,
  ["Other 1"]    = colors.lightBlue,

  ["Iron Golem"] = colors.yellow,
  ["Witch"]      = colors.lime,
  ["Piglin"]     = colors.pink,
  ["Other 2"]    = colors.gray,

  ["Light"]      = colors.red
}

-----------------------
-- Peripheral wiring --
-----------------------
local mon
if MONITOR_SIDE == "auto" then
    mon = peripheral.find("monitor")
else
    mon = peripheral.wrap(MONITOR_SIDE)
end

assert(mon, "Monitor not found. Check MONITOR_SIDE or connect a monitor.")
assert(mon.isColor(), "Advanced monitor required.")

-- Safe setTextScale
local ok, err = pcall(function() mon.setTextScale(1) end)
if not ok then
    error("Failed to set text scale: " .. tostring(err))
end

mon.setBackgroundColor(colors.black)
mon.setTextColor(colors.white)
mon.clear()

----------------
-- UI helpers --
----------------
local function centerText(x1, y1, x2, y2, text)
  local w = x2 - x1 + 1
  local h = y2 - y1 + 1
  local tx = x1 + math.floor((w - #text) / 2)
  local ty = y1 + math.floor(h / 2)
  mon.setCursorPos(tx, ty)
  mon.write(text)
end

local function fillRect(x1, y1, x2, y2, col)
  mon.setBackgroundColor(col)
  for y = y1, y2 do
    mon.setCursorPos(x1, y)
    mon.write(string.rep(" ", x2 - x1 + 1))
  end
end

-- Removed drawFrame for clean rectangles
local function drawFrame(x1, y1, x2, y2, col)
  -- intentionally empty
end

-------------------------
-- Layout calculations --
-------------------------
local W, H = mon.getSize()

local LIGHT_H  = math.max(3, math.floor(H * 0.18))
local TOP_H    = H - LIGHT_H
local ROWS     = 4
local PER_ROW  = math.floor(TOP_H / ROWS)
local EXTRA    = TOP_H - (PER_ROW * ROWS)

local buttons = {}  -- {label, x1,y1,x2,y2}
local function pushBtn(lbl, x1,y1,x2,y2) table.insert(buttons, {label=lbl,x1=x1,y1=y1,x2=x2,y2=y2}) end

local leftX1, leftX2   = 1, math.floor(W / 2)
local rightX1, rightX2 = leftX2 + 1, W

local curY = 1
for i = 1, ROWS do
  local h = PER_ROW + (i <= EXTRA and 1 or 0)
  local y1, y2 = curY, curY + h - 1
  pushBtn(labels_left[i],  leftX1,  y1, leftX2,  y2)
  pushBtn(labels_right[i], rightX1, y1, rightX2, y2)
  curY = y2 + 1
end
pushBtn(light_label, 1, TOP_H + 1, W, H)

------------------------
-- Bundled state utils --
------------------------
local function getBundled() return redstone.getBundledOutput(BUNDLED_SIDE) end
local function isOn(mask)   return bit32.band(getBundled(), mask) ~= 0 end
local function setMask(mask, on)
  local cur = getBundled()
  if on then cur = bit32.bor(cur, mask)
  else       cur = bit32.band(cur, bit32.bnot(mask)) end
  redstone.setBundledOutput(BUNDLED_SIDE, cur)
end
local function toggle(label)
  local mask = channels[label]
  if mask then setMask(mask, not isOn(mask)) end
end

------------------
-- Draw routine --
------------------
local COL_BG      = colors.black
local COL_OFF     = colors.red
local COL_ON      = colors.green
local COL_LIGHTON = colors.yellow

local function drawAll()
  mon.setBackgroundColor(COL_BG)
  mon.clear()
  for _,b in ipairs(buttons) do
    local mask = channels[b.label]
    local on   = mask and isOn(mask)
    local col  = on and COL_ON or COL_OFF
    if b.label == light_label and on then col = COL_LIGHTON end
    fillRect(b.x1, b.y1, b.x2, b.y2, col)
    centerText(b.x1, b.y1, b.x2, b.y2, b.label)
  end
end

-----------------
-- Event loop  --
-----------------
drawAll()
local monName = peripheral.getName(mon)

while true do
  local ev, a, b, c = os.pullEvent()
  if ev == "monitor_touch" and a == monName then
    local x, y = b, c
    for _,bt in ipairs(buttons) do
      if x >= bt.x1 and x <= bt.x2 and y >= bt.y1 and y <= bt.y2 then
        toggle(bt.label)
        drawAll()
        break
      end
    end
  elseif ev == "peripheral" or ev == "peripheral_detach" then
    local new
    if MONITOR_SIDE == "auto" then
        new = peripheral.find("monitor")
    else
        new = peripheral.wrap(MONITOR_SIDE)
    end
    if new then
        mon = new
        mon.setTextScale(1)
        drawAll()
        monName = peripheral.getName(mon)
    end
  end
end
