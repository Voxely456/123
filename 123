-- Bundled cable control for spawners + light
-- Works with advanced computer + 5x2 monitor

local monitor = peripheral.wrap("right") -- change if monitor is on another side
local colors = colors -- shorthand

-- Define channels (bundled colors)
local channels = {
    {name = "Blaze", color = colors.red},
    {name = "Wither", color = colors.blue},
    {name = "Creeper", color = colors.green},
    {name = "Iron Golem", color = colors.yellow},
    {name = "Witch", color = colors.purple},
    {name = "Piglin", color = colors.orange},
    {name = "Others 1", color = colors.cyan},
    {name = "Others 2", color = colors.lime},
    {name = "Others 3", color = colors.gray},
    {name = "Light", color = colors.white}
}

-- State storage
local states = {}
for _, c in ipairs(channels) do
    states[c.name] = false
end

-- Output bundled signals
local function updateOutputs()
    local out = 0
    for _, c in ipairs(channels) do
        if states[c.name] then
            out = colors.combine(out, c.color)
        end
    end
    redstone.setBundledOutput("back", out) -- change side if needed
end

-- Draw the UI
local function drawUI()
    monitor.clear()
    monitor.setCursorPos(1, 1)
    monitor.setTextScale(0.5) -- fit more text

    for i, c in ipairs(channels) do
        local status = states[c.name] and "ON" or "OFF"
        if states[c.name] then
            monitor.setTextColor(colors.lime)
        else
            monitor.setTextColor(colors.red)
        end
        monitor.write(string.format("[%s: %s]", c.name, status))

        local x, y = monitor.getCursorPos()
        if x > 30 then -- wrap to next line
            monitor.setCursorPos(1, y + 1)
        else
            monitor.write("  ")
        end
    end
    monitor.setTextColor(colors.white)
end

-- Toggle state on touch
local function toggleAt(x, y)
    -- simple mapping: each line has 3-4 items
    local index = (y - 1) * 3 + math.ceil(x / 11)
    if channels[index] then
        local c = channels[index]
        states[c.name] = not states[c.name]
        updateOutputs()
        drawUI()
    end
end

-- Main loop
drawUI()
while true do
    local e, side, x, y = os.pullEvent("monitor_touch")
    toggleAt(x, y)
end
