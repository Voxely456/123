-- ATM10 Mob Control Program
-- Advanced monitor setup: 5x2, computer at bottom right
-- Outputs: bundled cable

-- Wrap peripherals
local monitor = peripheral.wrap("bottom")  -- adjust if monitor is on a different side
local cableSide = "back"                  -- bundled cable side

-- Monitor setup
monitor.setTextScale(0.5)
monitor.setBackgroundColor(colors.black)
monitor.clear()

-- Mob list and their bundled cable color
local mobs = {
    {name="Zombie", color=colors.red, state=false},
    {name="Skeleton", color=colors.blue, state=false},
    {name="Creeper", color=colors.green, state=false},
    {name="Enderman", color=colors.purple, state=false},
    {name="Spider", color=colors.orange, state=false},
    {name="Witch", color=colors.yellow, state=false}
}

-- Draw buttons on monitor
local function drawButtons()
    monitor.clear()
    monitor.setCursorPos(1,1)
    for i, mob in ipairs(mobs) do
        local bg = mob.state and colors.lime or colors.gray
        monitor.setBackgroundColor(bg)
        monitor.setCursorPos(1, i)
        monitor.write(" " .. mob.name .. " ")
    end
end

-- Update bundled cable output
local function updateOutput()
    local output = 0
    for _, mob in ipairs(mobs) do
        if mob.state then
            output = bit.bor(output, mob.color)
        end
    end
    redstone.setBundledOutput(cableSide, output)
end

-- Handle monitor touch
local function handleTouch(x, y)
    if y <= #mobs then
        local mob = mobs[y]
        mob.state = not mob.state
        drawButtons()
        updateOutput()
    end
end

-- Initial draw
drawButtons()
updateOutput()

-- Main loop
while true do
    local event, side, x, y = os.pullEvent("monitor_touch")
    handleTouch(x, y)
end
